// js/products.js

import { appState } from './main.js';
import { showToastNotification } from './toast.js';
import { addToCart } from './cart.js';

export function renderProducts(productsToRender, containerSelector, options = {}) {
    const container = document.querySelector(containerSelector);
    if (!container) {
        console.error(`Contenedor no encontrado para renderizar productos: ${containerSelector}`);
        return;
    }

    let filteredProducts = [...productsToRender];

    // Aplicar filtros iniciales basados en las opciones
    // Combina productos nuevos y en oferta si la opción es true para el grid principal de novedades
    if (options.isNewAndOffer) {
        filteredProducts = filteredProducts.filter(p => p.isNew || p.isOnOffer);
    } else {
        if (options.isNew) {
            filteredProducts = filteredProducts.filter(p => p.isNew);
        }
        if (options.isOnOffer) {
            filteredProducts = filteredProducts.filter(p => p.isOnOffer);
        }
    }

    if (options.category) {
        filteredProducts = filteredProducts.filter(p => p.category === options.category);
    }
    if (options.limit) {
        filteredProducts = filteredProducts.slice(0, options.limit);
    }

    container.innerHTML = '';

    if (filteredProducts.length === 0) {
        container.innerHTML = `<p style="text-align: center; grid-column: 1 / -1; color: var(--text-color-light);">No hay productos disponibles en esta sección.</p>`;
        return;
    }

    filteredProducts.forEach(product => {
        const productCard = document.createElement('div');
        productCard.classList.add('product-card');
        productCard.dataset.id = product.id;

        const displayPrice = product.isOnOffer ? product.offerPrice : product.price;
        const oldPriceHtml = product.isOnOffer ? `<span class="old-price">$${product.price.toLocaleString('es-CO')}</span>` : '';

        productCard.innerHTML = `
            <img src="${product.imageUrl}" alt="${product.name}">
            <div class="product-info">
                <h3>${product.name}</h3>
                <p class="product-brand">${product.brand}</p>
                <p class="product-description">${product.description}</p>
                <div class="product-price">
                    ${oldPriceHtml}
                    <span class="current-price">$${displayPrice.toLocaleString('es-CO')}</span>
                </div>
                <div class="product-rating">
                    ${'★'.repeat(Math.floor(product.rating))}${'☆'.repeat(5 - Math.floor(product.rating))}
                    <span>(${product.rating})</span>
                </div>
                ${product.isNew ? '<span class="product-badge new">Nuevo</span>' : ''}
                ${product.isOnOffer ? '<span class="product-badge offer">Oferta</span>' : ''}
                <button class="btn-primary add-to-cart-btn" data-id="${product.id}" aria-label="Añadir ${product.name} al carrito">
                    <i class="fas fa-shopping-cart"></i> Añadir
                </button>
            </div>
        `;
        container.appendChild(productCard);
    });

    // Añadir event listeners para los botones "Añadir al Carrito"
    container.querySelectorAll('.add-to-cart-btn').forEach(button => {
        button.addEventListener('click', (event) => {
            const productId = event.currentTarget.dataset.id;
            const productToAdd = appState.products.find(p => p.id === productId);
            if (productToAdd) {
                addToCart(productToAdd);
            }
        });
    });
}

/**
 * Configura los filtros para una sección de productos específica.
 * @param {Array<Object>} allProducts - El array completo de productos.
 * @param {string} brandFilterSelector - Selector del elemento select para filtrar por marca.
 * @param {string} priceFilterSelector - Selector del elemento select para filtrar por precio.
 * @param {string} productSearchInputSelector - Selector del input para buscar productos.
 * @param {string} targetGridSelector - Selector del contenedor donde se renderizarán los productos filtrados.
 * @param {string} categoryToFilter - La categoría específica para filtrar en esta sección (ej. 'Licor', 'Cerveza', etc.).
 */
export function setupProductFilters(allProducts, brandFilterSelector, priceFilterSelector, productSearchInputSelector, targetGridSelector, categoryToFilter) {
    const brandFilter = document.querySelector(brandFilterSelector);
    const priceFilter = document.querySelector(priceFilterSelector);
    const productSearchInput = document.querySelector(productSearchInputSelector);

    // Asegúrate de que todos los elementos existan
    if (!brandFilter || !priceFilter || !productSearchInput || !document.querySelector(targetGridSelector)) {
        console.warn(`setupProductFilters: Algunos elementos de filtro o contenedor no se encontraron para la categoría "${categoryToFilter}". Saltando la configuración de filtros.`);
        return;
    }

    // Populate brand filter options
    const brands = [...new Set(allProducts
        .filter(p => p.category === categoryToFilter)
        .map(p => p.brand))];
    brandFilter.innerHTML = '<option value="">Todas</option>' + brands.map(brand => `<option value="${brand}">${brand}</option>`).join('');

    const applyFilters = () => {
        let filtered = allProducts.filter(p => p.category === categoryToFilter);

        // Filtrar por marca
        const selectedBrand = brandFilter.value;
        if (selectedBrand) {
            filtered = filtered.filter(p => p.brand === selectedBrand);
        }

        // Filtrar por término de búsqueda
        const searchTerm = productSearchInput.value.toLowerCase().trim();
        if (searchTerm) {
            filtered = filtered.filter(product =>
                product.name.toLowerCase().includes(searchTerm) ||
                product.brand.toLowerCase().includes(searchTerm) ||
                product.description.toLowerCase().includes(searchTerm)
            );
        }

        // Ordenar por precio
        const priceOrder = priceFilter.value;
        if (priceOrder === 'asc') {
            filtered.sort((a, b) => (a.isOnOffer ? a.offerPrice : a.price) - (b.isOnOffer ? b.offerPrice : b.price));
        } else if (priceOrder === 'desc') {
            filtered.sort((a, b) => (b.isOnOffer ? b.offerPrice : b.price) - (a.isOnOffer ? a.offerPrice : a.price));
        }

        renderProducts(filtered, targetGridSelector);
    };

    brandFilter.addEventListener('change', applyFilters);
    priceFilter.addEventListener('change', applyFilters);
    productSearchInput.addEventListener('input', applyFilters);

    // Ejecutar filtros al inicio para asegurar que el grid se renderice con la categoría correcta
    applyFilters();
}

/**
 * Renderiza un carrusel de productos horizontalmente, ideal para categorías específicas.
 * Este carrusel es para "swipe" en móviles y no usa dots ni botones de navegación explícitos.
 * @param {Array<Object>} productsToRender - Los productos a mostrar.
 * @param {string} containerSelector - El selector del div que será el track del carrusel (ej. '#cervezasCarousel').
 * @param {string} categoryToFilter - La categoría de productos a filtrar.
 */
export function renderProductCarouselSection(allProducts, containerSelector, categoryToFilter) {
    const container = document.querySelector(containerSelector);
    if (!container) {
        console.error(`Contenedor de carrusel de productos no encontrado: ${containerSelector}`);
        return;
    }

    const filteredProducts = allProducts.filter(p => p.category === categoryToFilter);

    container.innerHTML = ''; // Limpiar cualquier contenido existente

    if (filteredProducts.length === 0) {
        container.innerHTML = `<p style="text-align: center; width: 100%; color: var(--text-color-light);">No hay productos de ${categoryToFilter} disponibles.</p>`;
        return;
    }

    filteredProducts.forEach(product => {
        const productCard = document.createElement('div');
        productCard.classList.add('product-card'); // Reutiliza el estilo de product-card
        productCard.dataset.id = product.id;

        const displayPrice = product.isOnOffer ? product.offerPrice : product.price;
        const oldPriceHtml = product.isOnOffer ? `<span class="old-price">$${product.price.toLocaleString('es-CO')}</span>` : '';

        productCard.innerHTML = `
            <img src="${product.imageUrl}" alt="${product.name}">
            <div class="product-info">
                <h3>${product.name}</h3>
                <p class="product-brand">${product.brand}</p>
                <div class="product-price">
                    ${oldPriceHtml}
                    <span class="current-price">$${displayPrice.toLocaleString('es-CO')}</span>
                </div>
                ${product.isOnOffer ? '<span class="product-badge offer">Oferta</span>' : ''}
                <button class="btn-primary add-to-cart-btn" data-id="${product.id}" aria-label="Añadir ${product.name} al carrito">
                    <i class="fas fa-shopping-cart"></i> Añadir
                </button>
            </div>
        `;
        container.appendChild(productCard);
    });

    // Añadir event listeners para los botones "Añadir al Carrito"
    container.querySelectorAll('.add-to-cart-btn').forEach(button => {
        button.addEventListener('click', (event) => {
            const productId = event.currentTarget.dataset.id;
            const productToAdd = appState.products.find(p => p.id === productId);
            if (productToAdd) {
                addToCart(productToAdd);
            }
        });
    });
}


// Función para renderizar marcas (como en el carrusel de marcas)
export function renderBrands(brandsData, containerSelector) {
    const container = document.querySelector(containerSelector);
    if (!container) {
        console.error(`Contenedor de marcas no encontrado: ${containerSelector}`);
        return;
    }

    container.innerHTML = ''; // Limpiar cualquier contenido existente

    if (brandsData.length === 0) {
        container.innerHTML = `<p style="text-align: center; grid-column: 1 / -1; color: var(--text-color-light);">No hay marcas disponibles.</p>`;
        return;
    }

    brandsData.forEach(brand => {
        const brandDiv = document.createElement('div');
        brandDiv.classList.add('brand-logo');
        brandDiv.innerHTML = `<img src="${brand.logoUrl}" alt="${brand.name} Logo">`;
        container.appendChild(brandDiv);
    });
}
